# Builds hydrologic forecast packages or installer (Debian, Python)
#
# Triggered when a change is pushed to the dev-deploy branch on the 
# github repository https://github.com/waa-tool/electron-waa 
# This replaces the build previously handled by an on-premise Jenkins server, lw-74-cdc
#
# This pipeline largely reuses the preexisting infrastructure to build servers and front end.
# The final packaging and versioning is however significantly new
#
# See ./doc/azure_pipelines.md

trigger:
- deb_build

# resources:
#   repositories:
#   - repository: NumericalSlCpp # In a different organization
#     endpoint: NumericalSlCppGitServiceConnection
#     type: git
#     name: CsiroBitbucket/NumericalSlCppRepo

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

# to get a custom '$(Build.BuildNumber)', and 'r' is a counter reset to 1 every change of the major/minor versions
# TODO: reference to this technique on the web?
name: '0.1.$(Rev:r)'

# TODO: test stage, or step if it is worth reusing the ubuntu vm (likely)
stages:
- stage: Build
  displayName: Build packages
  jobs:
  - job: Build
    displayName: Build packages
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
    - task: Bash@3
      displayName: 'Where are repos checked out'
      inputs:
        targetType: 'inline'
        script: |
          echo Build.SourcesDirectory=$(Build.SourcesDirectory)
          ls $(Build.SourcesDirectory)
    - task: Bash@3
      displayName: 'Build debian and python packages'
      inputs:
        targetType: 'inline'
        script: |
          cd $(Build.SourcesDirectory)/packages
          echo yaml pipeline: TEST_PAT_ENV_VAR=$TEST_PAT_ENV_VAR
          # spits out yml pipeline: TEST_PAT_ENV_VAR=$(TEST_PAT)
          ./build-packages.sh
      env:
        SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
        # But this is not working for me. WTH?
        TEST_PAT_ENV_VAR: $(TEST_PAT) 
