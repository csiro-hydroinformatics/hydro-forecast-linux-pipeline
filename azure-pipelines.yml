# Builds hydrologic forecast packages or installer (Debian, Python)
#

trigger:
- main
- testing

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  # use pipeline_src_dir to facilitate testing out of Azure Pipeline
  pipeline_src_dir: $(Build.SourcesDirectory)
  root_out_dir: $(Build.BinariesDirectory)/outputs
  deb_out_dir: $(Build.BinariesDirectory)/outputs/deb
  py_out_dir: $(Build.BinariesDirectory)/outputs/py
  r_out_dir: $(Build.BinariesDirectory)/outputs/r

# to get a custom '$(Build.BuildNumber)', and 'r' is a counter reset to 1 every change of the major/minor versions
# TODO: reference to this technique on the web?
name: '0.1.$(Rev:r)'

# TODO: test stage, or step if it is worth reusing the ubuntu vm (likely)
stages:
- stage: Build
  displayName: Build packages
  jobs:
  - job: Build
    displayName: Build packages
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
    - task: Bash@3
      displayName: 'Where are repos checked out'
      inputs:
        targetType: 'inline'
        script: |
          echo Build.SourcesDirectory=$(Build.SourcesDirectory)
          ls $(Build.SourcesDirectory)
    - task: Bash@3
      displayName: 'Build debian and python packages'
      inputs:
        targetType: 'inline'
        script: |
          cd $(Build.SourcesDirectory)/packages
          mkdir -p $(root_out_dir)
          echo "ls $(root_out_dir)"
          ls $(root_out_dir)
          ./build-packages.sh $(root_out_dir)
          echo "ls $(root_out_dir)"
          ls $(root_out_dir)
      env:
        SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
        BRANCH_NAME_ENV_VAR: $(Build.SourceBranchName)
    # I could not locate an existing, or at least easy to use, point 
    # where we can check the "latest version" from the feed we populate with artifacts.
    # Let's create something small (not 100MB like the full installer) to be more nimble when
    # "just" checking for new versions 
    - task: Bash@3
      displayName: 'Create small artifact with version'
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p $(Build.BinariesDirectory)/version
          echo $(Build.BuildNumber) > $(Build.BinariesDirectory)/version/version.txt
    #- task: Bash@3
    #  displayName: 'Debug task only, check locations'
    #  inputs:
    #    targetType: 'inline'
    #    script: |
    #      # Figure out layout of the VM. 
    #      echo pwd:
    #      pwd
    #      echo
    #      ls
    #      echo $(Pipeline.Workspace)
    #      ls $(Pipeline.Workspace)
    # Note that VSCode may show an intellisense errors for some tasks:
    #    String does not match the pattern of "^PowerShell@2$"
    # This seems to be a bug in VSCode or a plugin. Ignore.
    - task: CopyFiles@2
      displayName: 'Copy build output to the artifact staging directory'
      inputs:
        sourceFolder: '$(root_out_dir)'
        contents: |
              deb_pkgs/**
              py_pkgs/**
              r_pkgs/**
              *.*
        targetFolder: '$(Build.ArtifactStagingDirectory)/release'

    - task: CopyFiles@2
      displayName: Copy files for installer version
      inputs:
        sourceFolder: '$(Build.BinariesDirectory)/version'
        contents: '*.*'
        targetFolder: '$(Build.ArtifactStagingDirectory)/version'

    # Note that the MS azure doc seems to advocate using the PublishPipelineArtifact task.
    # However this was too abstract to me, without a useful examplar to start from
    # Instead, using UniversalPackages which worked out OK

    #- task: PublishPipelineArtifact@1
    #  inputs:
    #    targetPath: '$(Pipeline.Workspace)'
    #    artifact: 'WaaInstaller'
    #    publishLocation: 'pipeline'

    - task: UniversalPackages@0
      displayName: Publish output bundle
      inputs:
        command: publish
        publishDirectory: '$(Build.ArtifactStagingDirectory)/release'
        vstsFeedPublish: 'OD222236-DigWaterAndLandscapes/hydro_forecast_deb'
        vstsFeedPackagePublish: 'swift_deb'
        versionOption: custom
        versionPublish: '$(Build.BuildNumber)'
        packagePublishDescription: 'Debian packages for swift and co.'

    - task: UniversalPackages@0
      displayName: Publish output bundle version
      inputs:
        command: publish
        publishDirectory: '$(Build.ArtifactStagingDirectory)/version'
        vstsFeedPublish: 'OD222236-DigWaterAndLandscapes/hydro_forecast_deb'
        vstsFeedPackagePublish: 'swift_deb_version'
        versionOption: custom
        versionPublish: '$(Build.BuildNumber)'
        packagePublishDescription: 'Version number for Debian packages for swift and co. bundle'


