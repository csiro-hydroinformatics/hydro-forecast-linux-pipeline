# Builds hydrologic forecast packages or installer (Debian, Python)
#

trigger:
- main
# - testing

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  # use pipeline_src_dir to facilitate testing out of Azure Pipeline
  pipeline_src_dir: $(Build.SourcesDirectory)
  root_out_dir: $(Build.BinariesDirectory)/outputs

# to get a custom '$(Build.BuildNumber)', and 'r' is a counter reset to 1 every change of the major/minor versions
# TODO: reference to this technique on the web?
name: '0.2.$(Rev:r)'

# TODO: test stage, or step if it is worth reusing the ubuntu vm (likely)
stages:
- stage: Build
  displayName: Build packages
  jobs:
  - job: Build
    displayName: Build packages
    pool:
      vmImage: ubuntu-latest
    #Cannnot get a service enpoint to work. 
    #https://github.com/MicrosoftDocs/azure-devops-docs/issues/13741
    #container:
    #  image: sfforecastingctnrregistry.azurecr.io/ubuntu-jammy-202310:20231110
    #  endpoint: SfFcastDockerSrvConnection
    # So, just use dockerhub for now.
    # container: disparue/ubuntu-jammy-202310:20240517
    container: disparue/ubuntu-jammy-202501:20250303
    steps:
    - checkout: self
    - task: Bash@3
      displayName: 'Where are repos checked out'
      inputs:
        targetType: 'inline'
        script: |
          echo Build.SourcesDirectory=$(Build.SourcesDirectory)
          ls $(Build.SourcesDirectory)
    - task: Bash@3
      displayName: 'Clone and checkout codebases'
      inputs:
        targetType: 'inline'
        script: |
          cd $(Build.SourcesDirectory)/packages
          mkdir -p $(root_out_dir)
          chmod go+rw $(root_out_dir)
          ./checkouts.sh
        failOnStderr: false
        # Tried `true``, but this seemed to lead to failing tasks without obvious real failure. 
        # failOnStderr: true
      env:
        SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
        BRANCH_NAME_ENV_VAR: $(Build.SourceBranchName)
    - task: Bash@3
      displayName: 'Unzip test/doc data'
      inputs:
        targetType: 'inline'
        script: |
          cd $(Build.SourcesDirectory)/packages
          echo /usr/local/share/data:
          ls /usr/local/share/data
          SRC_ROOT=${HOME}/src
          sudo ./unzip_testdata.sh ${SRC_ROOT}
        failOnStderr: false
        # Tried `true``, but this seemed to lead to failing tasks without obvious real failure. 
        # failOnStderr: true
      env:
        SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
        BRANCH_NAME_ENV_VAR: $(Build.SourceBranchName)
    - task: Bash@3
      displayName: 'Build and install debian packages'
      inputs:
        targetType: 'inline'
        script: |
          cd $(Build.SourcesDirectory)/packages
          chmod +x ./build_debian_pkgs.sh
          SRC_ROOT=${HOME}/src
          ROOT_BUILD_DIR=${HOME}/build
          DEB_PKGS_DIR=$(root_out_dir)/deb_pkgs
          mkdir -p ${DEB_PKGS_DIR}
          DEB_BUILD_ROOT=${HOME}/debbuild
          mkdir -p ${DEB_BUILD_ROOT}
          export SUDOCMD=sudo
          ./build_debian_pkgs.sh ${DEB_PKGS_DIR} ${SRC_ROOT} ${DEB_BUILD_ROOT}
          if [ -z "$(ls -A ${DEB_PKGS_DIR})" ]; then
            echo "FAILED: package output directory ${DEB_PKGS_DIR} appears to be empty"
            exit 1
          else
            echo "Output in ${DEB_PKGS_DIR}"
            ls ${DEB_PKGS_DIR}
          fi
        failOnStderr: false
        # Tried `true``, but this seemed to lead to failing tasks without obvious real failure. 
        # failOnStderr: true
      env:
        SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
        BRANCH_NAME_ENV_VAR: $(Build.SourceBranchName)
    - task: Bash@3
      displayName: 'Run C++ unit tests'
      inputs:
        targetType: 'inline'
        script: |
          cd $(Build.SourcesDirectory)/packages
          chmod +x ./test_native_libraries.sh
          SRC_ROOT=${HOME}/src
          ./test_native_libraries.sh ${SRC_ROOT} 1
        failOnStderr: false
        # Tried `true``, but this seemed to lead to failing tasks without obvious real failure. 
        # failOnStderr: true
      env:
        SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
        BRANCH_NAME_ENV_VAR: $(Build.SourceBranchName)
    - task: Bash@3
      displayName: 'Build python packages'
      inputs:
        targetType: 'inline'
        script: |
          cd $(Build.SourcesDirectory)/packages
          chmod +x ./build_python_pkgs.sh
          SRC_ROOT=${HOME}/src
          ROOT_BUILD_DIR=${HOME}/build
          PY_PKGS_DIR=$(root_out_dir)/py_pkgs
          mkdir -p ${PY_PKGS_DIR}
          ./build_python_pkgs.sh ${PY_PKGS_DIR} ${SRC_ROOT}
          if [ -z "$(ls -A ${PY_PKGS_DIR})" ]; then
            echo "FAILED: package output directory ${PY_PKGS_DIR} appears to be empty"
            exit 1
          else
            echo "Output in ${PY_PKGS_DIR}"
            ls ${PY_PKGS_DIR}
          fi
        failOnStderr: false
        # Tried `true``, but this seemed to lead to failing tasks without obvious real failure. 
        # failOnStderr: true
      env:
        SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
        BRANCH_NAME_ENV_VAR: $(Build.SourceBranchName)
    - task: Bash@3
      displayName: 'Build R packages'
      inputs:
        targetType: 'inline'
        script: |
          cd $(Build.SourcesDirectory)/packages
          chmod +x ./build_r_pkgs.sh
          SRC_ROOT=${HOME}/src
          ROOT_BUILD_DIR=${HOME}/build
          R_PKGS_DIR=$(root_out_dir)/r_pkgs
          mkdir -p ${R_PKGS_DIR}
          ./build_r_pkgs.sh ${R_PKGS_DIR} ${SRC_ROOT}
          ret_code=$?
          if [ $ret_code != 0 ]; then
              echo ERROR: build_r_pkgs.sh failed
              exit $ret_code;
          fi
          if [ -z "$(ls -A ${R_PKGS_DIR})" ]; then
            echo "FAILED: package output directory ${R_PKGS_DIR} appears to be empty"
            exit 1
          else
            echo "Output in ${R_PKGS_DIR}"
            ls ${R_PKGS_DIR}
          fi
        failOnStderr: false
        # Tried `true``, but this seemed to lead to failing tasks without obvious real failure. 
        # failOnStderr: true
      env:
        SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
        BRANCH_NAME_ENV_VAR: $(Build.SourceBranchName)
    - task: Bash@3
      displayName: 'Code provenance information'
      inputs:
        targetType: 'inline'
        script: |
          prov_file=$(root_out_dir)/provenance.md
          touch ${prov_file}
          SRC_ROOT=${HOME}/src
          CSIRO_BITBUCKET=${SRC_ROOT}
          cd ${CSIRO_BITBUCKET}/sf-stack
          echo "# Source code provenance information" >> ${prov_file}
          echo "" >> ${prov_file}
          git log -n 1 >> ${prov_file}
        failOnStderr: false
    - task: Bash@3
      displayName: 'Create small artifact with version'
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p $(Build.BinariesDirectory)/version
          echo $(Build.BuildNumber) > $(Build.BinariesDirectory)/version/version.txt
    #- task: Bash@3
    #  displayName: 'Debug task only, check locations'
    #  inputs:
    #    targetType: 'inline'
    #    script: |
    #      # Figure out layout of the VM. 
    #      echo pwd:
    #      pwd
    #      echo
    #      ls
    #      echo $(Pipeline.Workspace)
    #      ls $(Pipeline.Workspace)
    # Note that VSCode may show an intellisense errors for some tasks:
    #    String does not match the pattern of "^PowerShell@2$"
    # This seems to be a bug in VSCode or a plugin. Ignore.
    - task: CopyFiles@2
      displayName: 'Copy build output to the artifact staging directory'
      inputs:
        sourceFolder: '$(root_out_dir)'
        contents: |
              deb_pkgs/**
              py_pkgs/**
              r_pkgs/**
              *.*
        targetFolder: '$(Build.ArtifactStagingDirectory)/release'

    - task: CopyFiles@2
      displayName: Copy files for installer version
      inputs:
        sourceFolder: '$(Build.BinariesDirectory)/version'
        contents: '*.*'
        targetFolder: '$(Build.ArtifactStagingDirectory)/version'

    - task: Bash@3
      displayName: 'Check output with built packages'
      inputs:
        targetType: 'inline'
        script: |
          OUT_DIR=$(Build.ArtifactStagingDirectory)/release
          if [ -z "$(ls -A ${OUT_DIR})" ]; then
            echo "FAILED: package output directory ${OUT_DIR} appears to be empty"
            exit 1
          fi
          cd ${OUT_DIR}
          ls -lR
        failOnStderr: false

    # Note that the MS azure doc seems to advocate using the PublishPipelineArtifact task.
    # However this was too abstract to me, without a useful examplar to start from
    # Instead, using UniversalPackages which worked out OK

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'WaaInstaller'
        publishLocation: 'pipeline'
    - task: UniversalPackages@0
      displayName: Publish output bundle
      inputs:
        command: publish
        publishDirectory: '$(Build.ArtifactStagingDirectory)/release'
        vstsFeedPublish: 'OD222236-DigWaterAndLandscapes/hydro_forecast_deb'
        vstsFeedPackagePublish: 'swift_deb'
        versionOption: custom
        versionPublish: '$(Build.BuildNumber)'
        packagePublishDescription: 'Debian packages for swift and co.'
    - task: UniversalPackages@0
      displayName: Publish output bundle version
      inputs:
        command: publish
        publishDirectory: '$(Build.ArtifactStagingDirectory)/version'
        vstsFeedPublish: 'OD222236-DigWaterAndLandscapes/hydro_forecast_deb'
        vstsFeedPackagePublish: 'swift_deb_version'
        versionOption: custom
        versionPublish: '$(Build.BuildNumber)'
        packagePublishDescription: 'Version number for Debian packages for swift and co. bundle'


